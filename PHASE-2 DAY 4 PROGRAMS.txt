                                                                                DAY-4 PROGRAMS

#PERFORMING STACK USING LIST:--------

'''stack=[]
def push():
    element=int(input("enter a number:"))
    stack.append(element)
    print(stack)
def pop():
    if not stack:
        print("stack is empty")
    else:
        e=stack.pop()
        print("Removed element:",e)
        print(stack)
while True:
    print("select operation 1.push 2.pop 3.quit")
    choice=int(input())
    if choice==1:
        push()
    elif choice==2:
        pop()
    elif choice==3:
        break
    else:
        print("please, enter current operation")

#-----------------------------------------------------------------------------
#PERFORMING STACK USING LINKED LIST:-------

class Node:
    def _init_(self,data):
        self.data=data
        self.next=None
class stack:
    def _init_(self):
        self.head=None
    def push(self,data):
        if self.head is None:
            new=Node(data)
            self.head=new
        else:
            new=Node(data)
            new.next=self.head
            self.head=new
    def pop(self):
        if self.head is None:
            print("List is empty")
        else:
            poped_element=self.head
            self.head=self.head.next
            poped_element.next=None
            print("pop element:",poped_element.data)
    def peek(self):
        if self.head is None:
            print("list is empty")
        else:
            print("top element:",end='')
            print(self.head.data)
    def display(self):
        if self.head is None:
            print("list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,end="->")
                temp=temp.next
s=stack()
s.push(10)
s.push(20)
s.push(30)
s.push(40)
s.display()
print(' ')
s.peek()
s.pop()
s.display()
print(' ')
s.peek()

#--------------------------------------------------------------------------------------
#BALANCING BRACES USING STACK:-------

s=input("enter :")
st=[]
balanced=True
for char in s:
    if( char=='(' or char=='[' or char=='{'):
        st.append(char)
    elif(char==')'):
        if(len(st) and st.pop()!='('):
            balanced=False
            break
    elif(char=='}'):
        if(len(st) and st.pop()!='{'):
            balanced=False
            break
    elif(char==']'):
        print(len(st))
        if(len(st) and st.pop()!='['):
            balanced=False
            break
    else:
        balanced=False
        break

if (balanced==False or len(st)):
    print("not balanced")
else:
    print("Balanced")

#--------------------------------------------------------------------------------------------------
#PERFORMING QUEUE USING LIST:--------

queue=[]
def enqueue():
    element=int(input("enter a number:"))
    queue.append(element)
    print(queue)
def dequeue():
    if not queue:
        print("queue is empty")
    else:
        e=queue.pop(0)
        print("Removed element:",e)
        print(queue)
while True:
    print("select operation 1.add 2.remove 3.quit")
    choice=int(input())
    if choice==1:
        enqueue()
    elif choice==2:
        dequeue()
    elif choice==3:
        break
    else:
        print("please, enter current operation")

#------------------------------------------------------------------------------------------
#PERFORMING QUEUE USING LINKED LIST:--------

class Node:
    def _init_(self,data):
        self.data=data
        self.next=None
class queue:
    def _init_(self):
        self.head=None
        self.last=None
    def enqueue(self,data):
        if self.last is None:
            new=Node(data)
            self.head=new
            self.last=self.head
        else:
            new=Node(data)
            self.last.next=new
            self.last=self.last.next
    def dequeue(self):
        if self.head is None:
            print("queue is empty")
        else:
            popped_element=self.head.data
            self.head=self.head.next
            print("popped element:",popped_element)
    def display(self):
        if self.head is None:
            print("queue is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,end=" ")
                temp=temp.next
q=queue()
while True:
    print("select operation 1.add 2.remove 3.display 4.quit")
    choice=int(input("enter ur choice:"))
    if choice==1:
        d=int(input("enter a number:"))
        q.enqueue(d)
    elif choice==2:
        q.dequeue()
    elif choice==3:
        q.display()
        print()
    elif choice==4:
        break
    else:
        print("please, enter current operation")
        

#---------------------------------------------------------------------------------------------------
#IMPLEMENTING QUEUE USING QUEUE:---

#with maxsize:--
import queue
l=queue.Queue(maxsize=3)
l.put(10) #used to insert
l.put(20)
l.put(30)
print(l.qsize())
print(l.full())
print(l.get()) #shows the poped element
print(l.get())
print(l.empty())
print(l.get())
print(l.empty())
print(l.qsize())

#without maxsize:--
from queue import Queue #we can import both module(queue) and attribute(Queue) at one line also
l=Queue()
l.put(10)
l.put(20)
l.put(30)
print(l.qsize())
print(l.full())
print(l.get()) #shows the poped element
print(l.get())
print(l.empty())
print(l.get())
print(l.empty())
print(l.qsize())

#--------------------------------------------------------------------------------------------
#IMPLEMENTING STACK USING QUEUE:---

from queue import LifoQueue
s=LifoQueue(maxsize=3)
s.put(10)
s.put(20)
s.put(30)
print(s.qsize())
print(s.full())
print(s.get()) 
print(s.get())
print(s.empty())
print(s.get())
print(s.empty())
print(s.qsize())'''

class Node:
    def _init_(self,data):
        self.data=data
        self.next=None
class linkedlist:
    def _init_(self):
        self.head=None
        self.last_node=None
    def append(self,data):
        if self.last_node is None:
            new=Node(data)
            self.head=new
            self.last_node=self.head
        else:
            new=Node(data)
            self.last_node.next=new
            self.last_node=self.last_node.next
    def get_prev_node(self,ref_node):
        current=self.head
        while(current and current.next!= ref_node):
            current=current.next
        return current
    def remove(self,node):
        prev_node=self.get_prev_node(node)
        if prev_node is None:
            self.head=self.head.next
        else:
            prev_node.next=node.next
    def display(self):
        current=self.head
        while current:
            print(current.data,end=' ')
            current=current.next
    def remove_duplicates(llist):
        current1=llist.head
        while current1:
            data=current1.data
            current2=current2.next
            while current2:
                if current2.data==data:
                    llist.remove(current2)
                current2=current2.next
            current1=current1.next

a_list=linkedlist()
data_list=input("please enter the elements in the linked list:")
for data in data_list:
    a_list.append(data)
remove_duplicates(a_list)
print("The list with duplicate removed:")
a_list.display()