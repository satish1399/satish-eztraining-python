                                                          DAY-1 PROGRAMS

lambda function:

#Anonoymos function
l=[1,2,3]
r=map(lambda x:x+x,l)
print(list(r))

res=map(lambda n:pow(n,2),l)
print(list(res))

name="Aish"
(lambda name:print(name))(name)

example2:

l=[2,4,6,8,10,12,14]
r=map(lambda n:n**0.5,l)
print(list(r))

using math function:

import math
l=[2,4,6,8,10,12,14]
r=map(lambda n:math.sqrt(n),l)
print(list(r))


abstract to concrete:

from abc import ABC,abstractmethod
class abstractdemo(ABC):
    @abstractmethod#called decorator to make the method(function) abstract one
    def display(self):
        None
    @abstractmethod
    def show(self):
        None
#changing abstract to concrete        
class demo(abstractdemo):
    def display(self):
        print("Abstraction menthod")
    def show(self):
        print("2nd Function")
obj=demo()
obj.display()
obj.show()

one parent and one child class:

#one parent and one child class
class parent:
    def display(self):
        print("Parent class")
#derived class
class child(parent):
    def show(self):
        print("Child class")
        #c is object for child class
c=child()
c.display()
c.show()

Example for single inheritance:

class A:
    n=30
class B(A):
    def calc(self):
        c=self.n+67
        print(c)
obj=B()
obj.calc()
        
Multiple inherit:

#two classes-one child-like mom,dad----
#inherits properties of mom and dad
class mom:                        #base class1
    def mdisplay(self):
        print("Mom class")
class dad:                       #base class2
    def ddisplay(self):
        print("Dad class")
class child(mom,dad):             #derived class
    def cdisplay(self):
        print("Child class")
c1=child()
c1.cdisplay()
c1.mdisplay()
c1.ddisplay()

Multi level inherit:

#one parent and one child class
class grandparent:
    def gdisplay(self):
        print("Grandparent class")
class parent(grandparent):
    def pdisplay(self):
        print("Parent class")
class child(parent):
    def cdisplay(self):
        print("Child class")

a=child() #a is object for child class
a.gdisplay()
a.pdisplay()
a.cdisplay()


hirerical inherit:

#one base class and multiple child class
#object should be created for child class individual
class parent:
    def pdisplay(self):
        print("Parent class")
class child1(parent):
    def c1show(self):
        print("Child1 class")
class child2(parent):
    def c2show(self):
        print("Child2 class")
c1=child1()
c1.c1show()
c1.pdisplay()
c2=child2()
c2.c2show()
c2.pdisplay()

hybrid inheirt:

class parent():
    def pdisplay(self):
        print("Parent class")

class child1(parent):
    def c1show(self):
        print("Child1 class")
class child2(parent):
    def c2show(self):
        print("Child2 class")
class kid1(child1):
    def k1show(self):
        print("Kid1 class")
class kid2(child1):
    def k2show(self):
        print("Kid2 class")
class kidd1(child2):
    def kk1show(self):
        print("Kidd1 class")
class kidd2(child2):
    def kk2show(self):
        print("Kidd2 class")

c1=kidd2()
c1.kk2show()
c1.c2show()
c1.pdisplay()
c2=kidd1()
c2.kk1show()
c2.c2show()
c2.pdisplay()
c3=kid1()
c3.k1show()
c3.c1show()
c3.pdisplay()
c4=kid2()
c4.k2show()
c4.c1show()
c4.pdisplay()